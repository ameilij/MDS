mat <- as.matrix(mat)
p.mat <- cor.mtest(casos)
modelo <-cor(casos)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(mat, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(casos, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
# Plot correlograma
library(corrplot)
library(RColorBrewer)
modelo <-cor(casos)
corrplot(modelo, method="color")
# Plot correlograma
library(corrplot)
library(RColorBrewer)
modelo <-cor(casos)
corrplot(modelo, method="number")
corrplot(modelo, method="number", diag = FALSE)
corrplot(modelo, method="number", type = "upper")
plot(casos)
qplot(sumcum(tests), sumcum(casosPorDia)) + geom_smooth()
qplot(cumsum(tests), cumsum(casosPorDia)) + geom_smooth()
library(ggplot2)
require(gridExtra)
casosPorDia <- c(1,7,6,13,9,7,12,14,17,23, 26, 65, 45, 68, 32, 98, 115)
casosMarzo <- cumsum(casosPorDia)
dia <- c(9:25)
tests <- c(105, 41, 48, 207, 248, 208, 119, 97, 172, 210, 313, 401, 303, 627, 134, NA, NA)
# Convertir en data frame para usar con GGPLOT2
casos <- data.frame(
dia = dia,
tests = tests,
positivos = casosPorDia,
casos = casosMarzo)
graf1 <- ggplot(data=casos, aes(x = dia, y = casos)) +
geom_point(col = "orange", size = 2) +
xlab("Marzo 2020") +
ylab("Casos Acumulados") +
labs(title = ("Analísis Tendencia Casos Acumulados COVID-19 Panamá - 9 al 22 de Marzo 2020" ),
subtitle = ("Modelo de Calce LOESS (Regresión Polinómica Local) - Fuente de Datos Conferencias MINSA")) +
geom_smooth(method = "loess", formula = y ~ x) +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Plot Tendencia Casos por Dia
casosDiarios <- data.frame(casos = casosPorDia, dia = dia)
graf2 <- ggplot(data=casosDiarios, aes(x=dia, y=casos, group=1)) + geom_line() +
geom_point() +
xlab("Marzo 2020") +
ylab("Casos Diarios") +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Alinear gráficos
grid.arrange(graf1, graf2, nrow=2)
library(ggplot2)
require(gridExtra)
casosPorDia <- c(1,7,6,13,9,7,12,14,17,23, 26, 65, 45, 68, 32, 98, 115)
casosMarzo <- cumsum(casosPorDia)
dia <- c(9:25)
tests <- c(105, 41, 48, 207, 248, 208, 119, 97, 172, 210, 313, 401, 303, 627, 134, 457, 558)
# Convertir en data frame para usar con GGPLOT2
casos <- data.frame(
dia = dia,
tests = tests,
positivos = casosPorDia,
casos = casosMarzo)
# Plot correlograma
library(corrplot)
library(RColorBrewer)
modelo <-cor(casos)
corrplot(modelo, method="number", type = "upper")
library(ggplot2)
require(gridExtra)
casosPorDia <- c(1,7,6,13,9,7,12,14,17,23, 26, 65, 45, 68, 32, 98, 115)
casosMarzo <- cumsum(casosPorDia)
dia <- c(9:25)
tests <- c(105, 41, 48, 207, 248, 208, 119, 97, 172, 210, 313, 401, 303, 627, 134, 457, 558)
# Convertir en data frame para usar con GGPLOT2
casos <- data.frame(
dia = dia,
tests = tests,
positivos = casosPorDia,
casos = casosMarzo)
graf1 <- ggplot(data=casos, aes(x = dia, y = casos)) +
geom_point(col = "orange", size = 2) +
xlab("Marzo 2020") +
ylab("Casos Acumulados") +
labs(title = ("Analísis Tendencia Casos Acumulados COVID-19 Panamá - 9 al 22 de Marzo 2020" ),
subtitle = ("Modelo de Calce LOESS (Regresión Polinómica Local) - Fuente de Datos Conferencias MINSA")) +
geom_smooth(method = "loess", formula = y ~ x) +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Plot Tendencia Casos por Dia
casosDiarios <- data.frame(casos = casosPorDia, dia = dia)
graf2 <- ggplot(data=casosDiarios, aes(x=dia, y=casos, group=1)) + geom_line() +
geom_point() +
xlab("Marzo 2020") +
ylab("Casos Diarios") +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Alinear gráficos
grid.arrange(graf1, graf2, nrow=2)
# Plot correlograma
library(corrplot)
library(ggplot2)
require(gridExtra)
casosPorDia <- c(1,7,6,13,9,7,12,14,17,23, 26, 65, 45, 68, 32, 98, 115)
casosMarzo <- cumsum(casosPorDia)
dia <- c(9:25)
tests <- c(105, 41, 48, 207, 248, 208, 119, 97, 172, 210, 313, 401, 303, 627, 134, 457, 558)
# Convertir en data frame para usar con GGPLOT2
casos <- data.frame(
dia = dia,
tests = tests,
positivos = casosPorDia,
casos = casosMarzo)
graf1 <- ggplot(data=casos, aes(x = dia, y = casos)) +
geom_point(col = "orange", size = 2) +
xlab("Marzo 2020") +
ylab("Casos Acumulados") +
labs(title = ("Analísis Tendencia Casos Acumulados COVID-19 Panamá - 9 al 22 de Marzo 2020" ),
subtitle = ("Modelo de Calce LOESS (Regresión Polinómica Local) - Fuente de Datos Conferencias MINSA")) +
geom_smooth(method = "loess", formula = y ~ x) +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Plot Tendencia Casos por Dia
casosDiarios <- data.frame(casos = casosPorDia, dia = dia)
graf2 <- ggplot(data=casosDiarios, aes(x=dia, y=casos, group=1)) + geom_line() +
geom_point() +
xlab("Marzo 2020") +
ylab("Casos Diarios") +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
# Alinear gráficos
grid.arrange(graf1, graf2, nrow=2)
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
# Plot and get a linear model
plot(AirPassengers)
abline(reg = lm(AirPassengers ~ time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers, FUN = mean))
boxplot(AirPassengers ~ cycle(AirPassengers))
# Test for COP
library(quantmod)
getFX("USD/COP", source = "oanda")
# Dickey Fuller Test
library(urca)
test <- ur.df(COP, type = "none")
summary(test)
# Back to the whitepaper
library(tseries)
adf.test(diff(log(AirPassengers)), alternative = "stationary", k = 0)
E=rnorm(240)
X=cumsum(E)
plot(X,type="l")
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
datos_raw <- read.csv("bank-additional-full.csv", header = TRUE, sep = ";")
head(datos_raw)
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
library(ggplot2)
par(mfrow=c(1,3))
hist(datos_raw$age)
hist(datos_raw$age[datos_raw$y == "yes"])
hist(datos_raw$age[datos_raw$y == "no"])
par(mfrow=c(1,3))
boxplot(datos_raw$age)
boxplot(datos_raw$age[datos_raw$y == "yes"])
boxplot(datos_raw$age[datos_raw$y == "no"])
remotes::install_github('yihui/tinytex')
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
options(tinytex.verbose = TRUE)
par(mfrow=c(1,3))
boxplot(datos_raw$age)
boxplot(datos_raw$age[datos_raw$y == "yes"])
boxplot(datos_raw$age[datos_raw$y == "no"])
unique(datos_raw$job)
knitr::opts_chunk$set(echo = TRUE)
ggplot(datos_raw, aes(x = job, fill = y)) + geom_bar(position = "stack", stat = "identity")
library(ggplot2)
ggplot(datos_raw, aes(x = job, fill = y)) + geom_bar(position = "stack", stat = "identity")
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar(position = "stack", stat = "identity")
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar()
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar() + coord_flip()
# Learn about this chart at
# https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar(position = "fill") + coord_flip()
# Learn about this chart at
# https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar() + coord_flip()
# Learn about this chart at
# https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar(position = "fill") + coord_flip()
# Learn about this chart at
# https://www.r-graph-gallery.com/218-basic-barplots-with-ggplot2.html
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) + geom_bar(position = "fill") + coord_flip()
tabla <- table(datos_raw$y, datos_raw$job)
addmargins(tabla)
tabla_prop <- prop.table(tabla)
addmargins(tabla_prop)
?prop.table
?table
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
tabla_prop <- prop.table(x = tabla, margins = 1)
tabla_prop <- prop.table(x = tabla, margin = 1)
addmargins(tabla_prop)
tabla_prop <- prop.table(x = tabla, margin = 2)
addmargins(tabla_prop)
tabla_prop <- prop.table(x = tabla, margin = 2)
addmargins(tabla_prop)
tabla_prop <- prop.table(x = tabla, margin = 1)
addmargins(tabla_prop)
tabla_prop <- prop.table(x = tabla)
addmargins(tabla_prop)
install.packages("networkD3")
# Transform it to connection data frame with tidyr from the tidyverse:
links <- data %>%
as.data.frame() %>%
rownames_to_column(var="source") %>%
gather(key="target", value="value", -1) %>%
filter(value != 0)
# Library
library(networkD3)
library(dplyr)
# Create an incidence matrix. Usually the flow goes from the row names to the column names.
# Remember that our connection are directed since we are working with a flow.
set.seed(1)
data <- matrix(sample( seq(0,40), 49, replace=T ), 7, 7)
data[data < 35] <- 0
colnames(data) = rownames(data) = c("group_A", "group_B", "group_C", "group_D", "group_E", "group_F", "group_G")
# Transform it to connection data frame with tidyr from the tidyverse:
links <- data %>%
as.data.frame() %>%
rownames_to_column(var="source") %>%
gather(key="target", value="value", -1) %>%
filter(value != 0)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source), as.character(links$target)) %>%
unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
# Library
library(networkD3)
library(dplyr)
set.seed(1)
data <- matrix(sample( seq(0,40), 49, replace=T ), 7, 7)
data[data < 35] <- 0
colnames(data) = rownames(data) = c("group_A", "group_B", "group_C", "group_D", "group_E", "group_F", "group_G")
links <- data %>%
as.data.frame() %>%
rownames_to_column(var="source") %>%
gather(key="target", value="value", -1) %>%
filter(value != 0)
library(tidyr)
links <- data %>%
as.data.frame() %>%
rownames_to_column(var="source") %>%
gather(key="target", value="value", -1) %>%
filter(value != 0)
library(tibble)
links <- data %>%
as.data.frame() %>%
rownames_to_column(var="source") %>%
gather(key="target", value="value", -1) %>%
filter(value != 0)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source), as.character(links$target)) %>%
unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
install.packages("hbrrthemes")
install.packages("hrbrthemes")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = job, fill = y)) +
geom_bar(stat = "identity") +
facet_wrap(~ education) +
theme_ipsum()
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) +
geom_bar(stat = "identity") +
facet_wrap(~ education) +
theme_ipsum()
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) +
geom_bar() +
facet_wrap(~ education) +
theme_ipsum()
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(job), fill = y)) +
geom_bar(position = "fill") +
facet_wrap(~ education) +
theme_ipsum()
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar(position = "fill") +
facet_wrap(~ job) +
theme_ipsum()
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar(position = "fill") +
facet_wrap(~ job) +
theme_ipsum(axis.title = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar(position = "fill") +
facet_wrap(~ job) +
theme_ipsum() +
theme(axis.title = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar(position = "fill") +
facet_wrap(~ job) +
theme_ipsum() +
theme(axis.text = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar(position = "fill") +
theme_ipsum() +
theme(axis.text = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = as.factor(education), fill = y)) +
geom_bar() +
theme_ipsum() +
theme(axis.text = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = education, fill = y)) +
geom_bar() +
theme_ipsum() +
theme(axis.text = element_text( angle = 90))
library(ggplot2)
library(viridis)
library(hrbrthemes)
ggplot(datos_raw, aes(x = education, fill = y)) +
geom_bar() +
theme_ipsum() +
theme(axis.text = element_text( angle = 90))
hrbrthemes::import_roboto_condensed()
knitr::opts_chunk$set(echo = TRUE)
p = 0.3265306
N = 3675
prop = N * p
prop
# n <- (N * z^2 * p * q) / ((N - 1) * E^2 + z^2 * p * q)
n = 157
p = 48/147
q = 1 - p
SE  = sqrt((p*(1-p)/n))
SE
N <-  3675
p  <- 48/147
q = 1 - p
z = 1.96
E = 0.04
n <- (N * z^2 * p * q) / ((N - 1) * E^2 + z^2 * p * q)
n
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
tinytex::tlmgr_update()
setwd("~/Documents/Master Data Science/MDS/ECD")
knitr::opts_chunk$set(echo = TRUE,  dev = "cairo_pdf")
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read_csv("insurance.csv")
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
summary(datos)
fit <- lm(bmi ~ charges)
fit <- lm(bmi ~ charges, data = datos)
fit
summary(fit)
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
model <- lm(bmi ~ charges)
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
plot(datos$bmi, datos$charges)
fit <- lm(bmi ~ charges, data = datos)
summary(fit)
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
qplot(datos$bmi, datos$charges)
fit <- lm(bmi ~ charges, data = datos)
summary(fit)
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
qplot(datos$bmi, datos$charges)
fit <- lm(bmi ~ charges, data = datos)
summary(fit)
res <- stack(data.frame(Observed = datos$charges, Predicted = fitted(fit)))
res <- cbind(res, x = rep(datos$bmi, 2))
require("lattice")
xyplot(values ~ x, data = res, group = ind, auto.key = TRUE)
?lm
library(hrbrthemes)
library(ggplot2)
library(Cairo)
library(extrafont)
extrafont::loadfonts()
datos <- read.csv("insurance.csv")
qplot(datos$bmi, datos$charges)
fit <- lm(charges ~ bmi, data = datos)
summary(fit)
res <- stack(data.frame(Observed = datos$charges, Predicted = fitted(fit)))
res <- cbind(res, x = rep(datos$bmi, 2))
require("lattice")
xyplot(values ~ x, data = res, group = ind, auto.key = TRUE)
head(datos)
predict(fit, x = 27.9)
?predict
predict(fit, newdata = c(27.9))
predict(fit, newdata = 27.9)
predict(fit, newdata = datos[1, ])
head(datos)
predict(fit, newdata = datos[2, ])
predict(fit, newdata = datos[3, ])
predict(fit, newdata = datos[4, ])
predict(fit, newdata = datos[5, ])
head(datos)
predict(fit, newdata = datos[1:5, ])
